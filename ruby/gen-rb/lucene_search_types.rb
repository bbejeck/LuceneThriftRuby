#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


class Person
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FIRSTNAME = 1
  LASTNAME = 2
  ADDRESS = 3
  EMAIL = 4

  FIELDS = {
      FIRSTNAME => {:type => ::Thrift::Types::STRING, :name => 'firstName'},
      LASTNAME => {:type => ::Thrift::Types::STRING, :name => 'lastName'},
      ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'},
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'}
  }

  #added to translate from symbol to expected search format
  SEARCH_KEYS_MAPPING = {:first_name => 'firstName',
                         :last_name => 'lastName',
                         :email => 'email',
                         :address => 'address'}


  def self.method_missing(method_name, *args)
    lucene_client = ThriftConnection::LuceneClient.new
    query = ""
        #handles find_by_first_name etc
    if method_name.to_s =~ /^find_by_([a-z]+_?[a-z]*)$/
      query = "#{SEARCH_KEYS_MAPPING[$1.to_sym]}:#{args[0]}"
        #handles find_by_first_name_or_last_name, find_by_first_name_and_email 
    elsif method_name.to_s =~/^find_by_([a-z]+_[a-z]+)_([a-z]+)_([a-z]+_?[a-z]*)$/
      query ="#{SEARCH_KEYS_MAPPING[$1.to_sym]}:#{args[0]} #{$2.upcase} #{SEARCH_KEYS_MAPPING[$3.to_sym]}:#{args[1]}"
    else
       raise ArgumentError.new("search method pattern '#{method_name}' not recognized")
    end

    results = lucene_client.search(query)
    lucene_client.close
    results
  end

  def struct_fields;
    FIELDS;
  end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LuceneSearchException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union

  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields;
    FIELDS;
  end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

